generator client {
  provider = "prisma-client-js"
  output   = "../prisma_client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  isGoogleProvider Boolean        @default(false)
  fullName         String
  email            String         @unique
  hashedPassword   String?
  avatar           String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  accounts         Account[]
  transactions     Transaction[]
  budgets          Budget[]
  notifications    Notification[]

  @@map("users")
}

enum AccountType {
  CURRENT
  SAVINGS
}

model Account {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  balance      Float         @default(0)
  type         AccountType
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String        @map("user") @db.ObjectId
  transactions Transaction[]
  Budget       Budget[]

  @@index([userId])
  @@map("accounts")
}

enum TransactionType {
  EXPENSE
  INCOME
  TRANSFER
  INVESTMENT
  FEE
  OTHER
}

model Transaction {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  type        TransactionType
  description String?
  date        DateTime
  category    String
  account     Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId   String          @map("account") @db.ObjectId
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String          @map("user") @db.ObjectId

  @@index([accountId])
  @@index([userId])
  @@map("transactions")
}

model Budget {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  amount       Float
  isForOverall Boolean @default(true)
  category     String?

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @map("account") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @map("user") @db.ObjectId

  @@unique([category, accountId])
  @@index([userId])
  @@index([accountId])
  @@map("budgets")
}

model Notification {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  isAlertType Boolean @default(false)
  title       String
  description String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user") @db.ObjectId

  @@index([userId])
  @@map("notifications")
}
